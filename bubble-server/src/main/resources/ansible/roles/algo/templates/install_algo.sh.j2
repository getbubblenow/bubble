#!/bin/bash

function die {
  echo 1>&2 "${1}"
  exit 1
}

ALGO_BASE="$(cd "$(dirname "$0")" && pwd)"
CA_PASS_FILE="/home/bubble/.BUBBLE_ALGO_CA_KEY_PASSWORD"

cd "${ALGO_BASE}" || die "could not cd into ${ALGO_BASE}"

if [[ ! -f "${ALGO_BASE}/config.cfg.hbs" ]] ; then
  die "No ${ALGO_BASE}/config.cfg.hbs found"
fi
if [[ -f "${ALGO_BASE}/.install_marker" ]] ; then
  echo "Algo already installed"
  exit 0
fi

java -cp /home/bubble/api/bubble.jar bubble.main.BubbleMain generate-algo-conf --algo-config ${ALGO_BASE}/config.cfg.hbs || die "Error writing algo config.cfg"

virtualenv -p python3 .env \
  && source .env/bin/activate \
  && python3 -m pip install -U pip virtualenv \
  && python3 -m pip install -r requirements.txt \
  && ansible-playbook main.yml --skip-tags debug \
    -e "ca_password_file=${CA_PASS_FILE}
        ca_password_file_owner=bubble
        provider=local
        server=localhost
        store_cakey=true
        ondemand_cellular=false
        ondemand_wifi=false
        store_pki=true
        dns_adblocking=false
        ssh_tunneling=false
        endpoint={{ endpoint }}
        server_name={{ server_name }}" || die "Error installing algo"

# Archive configs in a place that the BackupService can pick them up
CONFIGS_BACKUP=/home/bubble/.BUBBLE_ALGO_CONFIGS.tgz
cd ${ALGO_BASE} && tar czf ${CONFIGS_BACKUP} configs && chgrp bubble ${CONFIGS_BACKUP} && chmod 660 ${CONFIGS_BACKUP} || die "Error backing up algo configs"
cd /home/bubble && tar xzf ${CONFIGS_BACKUP} && chgrp -R bubble configs && chown -R bubble configs && chmod 500 configs || die "Error unpacking algo configs to bubble home"

# Write VPN subnets to mitmproxy
WG_IP4=$(cat ${ALGO_BASE}/config.cfg | grep wireguard_network_ipv4 | grep -v '^#' | awk -F': ' '{print $2}' | tr -d ' ')
if [[ -z ${WG_IP4} ]] ; then
  die "wireguard_network_ipv4 not found in ${ALGO_BASE}/config.cfg"
fi
WG_IP6=$(cat ${ALGO_BASE}/config.cfg | grep wireguard_network_ipv6 | grep -v '^#' | awk -F': ' '{print $2}' | tr -d ' ')
if [[ -z ${WG_IP6} ]] ; then
  die "wireguard_network_ipv6 not found in ${ALGO_BASE}/config.cfg"
fi

VPN_IP4_PY=/home/mitmproxy/mitmproxy/bubble_vpn4.py
if [[ ! -f ${VPN_IP4_PY} || $(cat ${VPN_IP4_PY} | grep -c ${WG_IP4}) -eq 0 ]] ; then
  echo "
wireguard_network_ipv4 = '${WG_IP4}'
" > ${VPN_IP4_PY} || die "Error writing VPN subnet to ${VPN_IP4_PY}"
  chown mitmproxy.mitmproxy ${VPN_IP4_PY} || die "Error setting owner of ${VPN_IP4_PY} to mitmproxy"
  chmod 500 ${VPN_IP4_PY} || die "Error setting permissions on ${VPN_PY}"
fi

VPN_IP6_PY=/home/mitmproxy/mitmproxy/bubble_vpn6.py
if [[ ! -f ${VPN_IP6_PY} || $(cat ${VPN_IP6_PY} | grep -c ${WG_IP6}) -eq 0 ]] ; then
  echo "
wireguard_network_ipv6 = '${WG_IP6}'
" > ${VPN_IP6_PY} || die "Error writing VPN subnet to ${VPN_IP6_PY}"
  chown mitmproxy.mitmproxy ${VPN_IP6_PY} || die "Error setting owner of ${VPN_IP6_PY} to mitmproxy"
  chmod 500 ${VPN_IP6_PY} || die "Error setting permissions on ${VPN_IP6_PY}"
fi

# Restart algo_refresh_users_monitor and wg_monitor_connections
supervisorctl reload || echo "[install_algo.sh] WARNING: Error calling 'supervisorctl reload'"
sleep 3s
supervisorctl restart algo_refresh_users_monitor || echo "[install_algo.sh] WARNING: Error restarting algo_refresh_users_monitor"
supervisorctl restart wg_monitor_connections || echo "[install_algo.sh] WARNING: Error restarting algo_refresh_users_monitor"

# Restart dnscrypt-proxy
service dnscrypt-proxy restart

touch "${ALGO_BASE}/.install_marker"
