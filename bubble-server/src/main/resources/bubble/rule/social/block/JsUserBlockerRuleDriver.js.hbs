let {{JS_PREFIX}}_blocked_users = [];
let {{JS_PREFIX}}_blocked_keywords = [];
let {{JS_PREFIX}}_blocked_links = [];
let {{JS_PREFIX}}_supports_keywords = false;
const {{JS_PREFIX}}_request_id = '{{BUBBLE_REQUEST_ID}}';

let {{JS_PREFIX}}_unblocked_needs_refresh = false;

let {{JS_PREFIX}}_interval = null;
let {{JS_PREFIX}}_last_applied = null;
const {{JS_PREFIX}}_idle_interval = 2500;

let {{JS_PREFIX}}_messages = null;

function {{JS_PREFIX}}_uuidv4() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

const {{JS_PREFIX}}_create_block_img = function(size) {
    const img = document.createElement('img');
    img.src = '/__bubble/api/filter/assets/{{BUBBLE_REQUEST_ID}}/UserBlocker/icon?raw=true';
    img.width = typeof size !== 'undefined' ? size : 24;
    return img;
}

const {{JS_PREFIX}}_create_unblock_img = function(size) {
    const img = document.createElement('img');
    img.src = '/__bubble/api/filter/assets/{{BUBBLE_REQUEST_ID}}/UserBlocker/unblock-icon?raw=true';
    img.width = typeof size !== 'undefined' ? size : 16;
    return img;
}

const {{JS_PREFIX}}_stop_refreshing_blocks = function(e) {
    if ({{JS_PREFIX}}_interval !== null) {
        window.clearInterval({{JS_PREFIX}}_interval);
        {{JS_PREFIX}}_interval = null;
    }
}
const {{JS_PREFIX}}_refresh_blocks = function(e) {
    {{PAGE_PREFIX}}_log('_refresh_blocks!');
    {{JS_PREFIX}}_last_applied = Date.now();
    {{JS_PREFIX}}_stop_refreshing_blocks();
    {{JS_PREFIX}}_apply_blocks({{JS_PREFIX}}_blocked_users);
    {{JS_PREFIX}}_interval = window.setInterval(function () {
        {{JS_PREFIX}}_last_applied = Date.now();
        {{JS_PREFIX}}_apply_blocks({{JS_PREFIX}}_blocked_users);
    }, {{JS_PREFIX}}_idle_interval);
}

function {{JS_PREFIX}}_fetch_blocks (do_apply) {
    const requestOptions = { method: 'GET' };
    const blocked_users_url = '/__bubble/api/filter/data/{{BUBBLE_DATA_ID}}/read?value=true';
    fetch(blocked_users_url, requestOptions)
        .then(resp => resp.json())
        .then(data => {
            const blocked_users = [];
            const blocked_keywords = [];
            const blocked_links = [];
            for (let i=0; i<data.length; i++) {
                let token = data[i];
                if (token.startsWith('kw:')) {
                    blocked_keywords.push(token.substring('kw:'.length));
                } else if (token.startsWith('link:')) {
                    blocked_links.push(token.substring('link:'.length));
                } else if (token.startsWith('author:')) {
                    blocked_users.push(token.substring('author:'.length));
                } else {
                    blocked_users.push(token);
                }
            }
            {{JS_PREFIX}}_blocked_users = blocked_users;
            {{JS_PREFIX}}_blocked_keywords = blocked_keywords;
            {{JS_PREFIX}}_blocked_links = blocked_links;
            {{JS_PREFIX}}_refresh_blocks();
        });
}

window.addEventListener('popstate', {{JS_PREFIX}}_refresh_blocks);

function {{JS_PREFIX}}_handleVisibilityChange() {
    if (document.hidden) {
        {{JS_PREFIX}}_stop_refreshing_blocks();
    } else  {
        {{JS_PREFIX}}_refresh_blocks();
    }
}

function {{JS_PREFIX}}_check_stale_refresher(ev) {
    if ({{JS_PREFIX}}_last_applied === null || Date.now() - {{JS_PREFIX}}_last_applied > 2*{{JS_PREFIX}}_idle_interval) {
        {{PAGE_PREFIX}}_log('check_stale_refresher forcing refresh upon document event.type='+ev.type);
        {{JS_PREFIX}}_refresh_blocks();
    }
}

document.addEventListener("visibilitychange", {{JS_PREFIX}}_handleVisibilityChange, false);
document.addEventListener("click", {{JS_PREFIX}}_check_stale_refresher, false);
document.addEventListener("scroll", {{JS_PREFIX}}_check_stale_refresher, false);

function {{JS_PREFIX}}_update_block (name, do_block) {
    {{JS_PREFIX}}_apply_blocks({{JS_PREFIX}}_blocked_users);
    const block_user_url = '/__bubble/api/filter/data/{{BUBBLE_DATA_ID}}/write';
    const requestOptions = {
        method: 'POST',
        body: JSON.stringify({key: name, data: do_block})
    };
    fetch(block_user_url, requestOptions);
}

function {{JS_PREFIX}}_block_user (author) {
    const index = {{JS_PREFIX}}_blocked_users.indexOf(author);
    if (index === -1) {
        {{JS_PREFIX}}_blocked_users.push(author);
        {{JS_PREFIX}}_update_block(author, true);
    }
}

function {{JS_PREFIX}}_block_keyword (keyword) {
    keyword = keyword.replace(/\s+/g, ' ').trim();
    if (keyword.length === 0) return false;
    const index = {{JS_PREFIX}}_blocked_keywords.indexOf(keyword);
    if (index === -1) {
            {{JS_PREFIX}}_blocked_keywords.push(keyword);
            {{JS_PREFIX}}_update_block('kw:' + keyword, true);
    }
    return true;
}

function {{JS_PREFIX}}_includes_block_keyword (element) {
    const keywords = {{JS_PREFIX}}_blocked_keywords;
    if (keywords.length > 0) {
        const html = element.innerHTML;
        for (let i = 0; i < keywords.length; i++) {
            if (html.indexOf(keywords[i]) !== -1) {
                {{PAGE_PREFIX}}_log('>>> includes_block_keyword: blocking based on keyword: '+keywords[i]);
                return true;
            }
        }
    }
    return false;
}

function {{JS_PREFIX}}_unblock_user (author) {
    const index = {{JS_PREFIX}}_blocked_users.indexOf(author);
    if (index === -1) return false;
    {{JS_PREFIX}}_blocked_users.splice(index, 1);
    {{JS_PREFIX}}_update_block(author, false);
    return true;
}

function {{JS_PREFIX}}_unblock_keyword (keyword) {
    const index = {{JS_PREFIX}}_blocked_keywords.indexOf(keyword.substring('kw:'.length));
    if (index === -1) return false;
    {{JS_PREFIX}}_blocked_keywords.splice(index, 1);
    {{JS_PREFIX}}_update_block(keyword, false);
    return true;
}

let {{JS_PREFIX}}_app_details = false;

function {{JS_PREFIX}}_create_unblock_author_control(authorName) {
    return {{JS_PREFIX}}_create_unblock_control(authorName, {{JS_PREFIX}}_unblock_user);
}

function {{JS_PREFIX}}_create_unblock_keyword_control(keyword) {
    return {{JS_PREFIX}}_create_unblock_control('kw:'+keyword, {{JS_PREFIX}}_unblock_keyword);
}

function {{JS_PREFIX}}_create_unblock_control(name, unblock_func) {
    const imgHolder = {{JS_PREFIX}}_create_unblock_img();
    const blockSpan = document.createElement('span');
    const unblockLink = document.createElement('a');
    unblockLink.style.cursor = 'pointer';
    unblockLink.addEventListener("click", function (e) {
        if (unblock_func(name)) {
            {{JS_PREFIX}}_unblocked_needs_refresh = true;
            {{JS_PREFIX}}_hide_app_details();
            {{JS_PREFIX}}_show_app_details();
        }
        e.stopPropagation();
        e.preventDefault();
        return false;
    });
    unblockLink.appendChild(imgHolder);
    blockSpan.appendChild(unblockLink)
    blockSpan.id = 'blockSpan_'+{{JS_PREFIX}}_uuidv4();
    return blockSpan;
}

function {{JS_PREFIX}}_hide_app_details() {
    {{PAGE_PREFIX}}_log('hide_app_details called');
    const detailsDivId = '{{JS_PREFIX}}_detailsDiv';
    let detailsDiv = document.getElementById(detailsDivId);
    {{JS_PREFIX}}_app_details = false;
    if (detailsDiv != null) {
        detailsDiv.style.display = 'none';
        while (detailsDiv.firstChild) {
            detailsDiv.removeChild(detailsDiv.lastChild);
        }
    }
}

function {{JS_PREFIX}}_show_app_details() {
    {{PAGE_PREFIX}}_log('show_app_details called');
    {{JS_PREFIX}}_refresh_blocks();
    const detailsDivId = '{{JS_PREFIX}}_detailsDiv';
    let detailsDiv = document.getElementById(detailsDivId);
    {{JS_PREFIX}}_app_details = true;
    if (detailsDiv === null) {
        detailsDiv = {{PAGE_PREFIX}}_createDetailsDiv(detailsDivId);
        document.getElementsByTagName('body')[0].appendChild(detailsDiv);
    }
    while (detailsDiv.firstChild) {
        detailsDiv.removeChild(detailsDiv.lastChild);
    }
    detailsDiv.style.display = 'block';
    detailsDiv.style.visibility = 'visible';

    let blocks = {{JS_PREFIX}}_blocked_users;
    if (blocks !== null && blocks.length > 0) {
        blocks = blocks.slice(); // copy first, then sort case insensitive using user's locale
        blocks.sort(function (a, b) {
            return a.localeCompare(b, '{{ACCOUNT_LANG}}', {'sensitivity': 'base'});
        });
    }
    let keywords = {{JS_PREFIX}}_blocked_keywords;
    if (keywords !== null && keywords.length > 0) {
        keywords = keywords.slice(); // copy first, then sort case insensitive using user's locale
        keywords.sort(function (a, b) {
            return a.localeCompare(b, '{{ACCOUNT_LANG}}', {'sensitivity': 'base'});
        });
    }
    if ({{JS_PREFIX}}_unblocked_needs_refresh) {
        const refreshControl = document.createElement('a');
        refreshControl.style.textDecoration = 'underline';
        refreshControl.style.color = 'blue';
        refreshControl.style.cursor = 'pointer';
        refreshControl.addEventListener("click", function (e) {
            e.stopPropagation();
            e.preventDefault();
            window.location.reload();
            return false;
        });
        const refreshMessage = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_refreshPage', 'refresh');
        refreshControl.appendChild(document.createTextNode(refreshMessage));
        detailsDiv.appendChild(refreshControl);
        detailsDiv.appendChild(document.createElement('hr'));
    }
    const usersHeaderText = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_blockedUsers', 'Users');
    const usersHeader = document.createElement('strong');
    usersHeader.appendChild(document.createTextNode(usersHeaderText));
    detailsDiv.appendChild(usersHeader);
    if (blocks === null || blocks.length === 0) {
        const emptyMessage = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_noUsersBlocked', '(empty)');
        const entryDiv = document.createElement('div');
        const entryText = document.createTextNode(emptyMessage);
        entryDiv.appendChild(entryText);
        detailsDiv.appendChild(entryDiv);
    } else {
        for (let i = 0; i < blocks.length; i++) {
            const entry = blocks[i];
            const entryDiv = document.createElement('div');
            const entryText = document.createTextNode(entry);
            entryDiv.appendChild(entryText);
            entryDiv.appendChild({{JS_PREFIX}}_create_unblock_author_control(entry));
            detailsDiv.appendChild(entryDiv);
        }
    }
    detailsDiv.appendChild(document.createElement('hr'));

    if ({{JS_PREFIX}}_supports_keywords) {
        const keywordsHeaderText = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_blockedKeywords', 'Keywords');
        const keywordsHeader = document.createElement('strong');
        keywordsHeader.appendChild(document.createTextNode(keywordsHeaderText));
        detailsDiv.appendChild(keywordsHeader);
        if (keywords === null || keywords.length === 0) {
            const emptyMessage = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_noKeywordsBlocked', '(empty)');
            const entryDiv = document.createElement('div');
            const entryText = document.createTextNode(emptyMessage);
            entryDiv.appendChild(entryText);
            detailsDiv.appendChild(entryDiv);
        } else {
            for (let i = 0; i < keywords.length; i++) {
                const entry = keywords[i];
                const entryDiv = document.createElement('div');
                const entryText = document.createTextNode(entry);
                entryDiv.appendChild(entryText);
                entryDiv.appendChild({{JS_PREFIX}}_create_unblock_keyword_control(entry));
                detailsDiv.appendChild(entryDiv);
            }
        }
        const add_keyword = function(value) {
            if ({{JS_PREFIX}}_block_keyword(value)) {
                {{JS_PREFIX}}_hide_app_details();
                {{JS_PREFIX}}_show_app_details();
            }
        }
        const keywordInput = document.createElement('input');
        keywordInput.type = 'text';
        keywordInput.size = 14;
        keywordInput.style.fontSize = 'small';
        keywordInput.addEventListener('keypress', function (e) { if (e.key === 'Enter') { add_keyword(keywordInput.value); } });
        const addMessage = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_addKeyword', 'Add');
        const keywordAdd = document.createElement('button');
        keywordAdd.style.fontSize = 'x-small';
        keywordAdd.addEventListener('click', function (e) { add_keyword(keywordInput.value); });
        keywordAdd.appendChild(document.createTextNode(addMessage));
        const kwForm = document.createElement('span');
        kwForm.style.fontSize = 'small';
        kwForm.appendChild(keywordInput);
        kwForm.appendChild(keywordAdd);
        detailsDiv.appendChild(kwForm);
        detailsDiv.appendChild(document.createElement('hr'));

        const listKeys = Object.keys({{JS_PREFIX}}_messages).filter(k => k.startsWith('web_kwlist_') && !k.endsWith('_url'));
        if (listKeys.length > 0) {
            const listsHeaderText = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_blockedKeywordLists', 'Keyword Lists');
            const listsHeader = document.createElement('strong');
            listsHeader.appendChild(document.createTextNode(listsHeaderText));
            detailsDiv.appendChild(listsHeader);

            listKeys.forEach(k => {
                const listName = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, k, null);
                const listUrl = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, k+'_url', null);
                if (listUrl === null) {
                    console.log('URL not defined for list: '+k);
                    return;
                }
                const entryDiv = document.createElement('div');
                const entryLink = document.createElement('a');
                entryLink.href = listUrl;
                entryLink.style.textDecoration = 'underline';
                entryLink.style.color = 'blue';
                entryLink.style.cursor = 'pointer';
                entryLink.appendChild(document.createTextNode(listName));

                const entryCheckbox = document.createElement('input');
                entryCheckbox.type = 'checkbox'
                entryCheckbox.addEventListener('click', function (e) {
                    e.stopPropagation();
                    if (entryCheckbox.checked) {
                        console.log('checked ' + listName + ': ' + listUrl);
                    } else {
                        {{JS_PREFIX}}_unblocked_needs_refresh = true;
                        {{JS_PREFIX}}_hide_app_details();
                        {{JS_PREFIX}}_show_app_details();
                        console.log('unchecked ' + listName + ': ' + listUrl);
                    }
                })
                entryDiv.appendChild(entryCheckbox);
                entryDiv.appendChild(entryLink);

                detailsDiv.appendChild(entryDiv);
            });

            detailsDiv.appendChild(document.createElement('hr'));
        }
    }
    const closeControl = document.createElement('a');
    closeControl.style.textDecoration = 'underline';
    closeControl.style.color = 'blue';
    closeControl.style.cursor = 'pointer';
    closeControl.addEventListener("click", function (e) {
        e.stopPropagation();
        e.preventDefault();
        {{JS_PREFIX}}_hide_app_details();
        return false;
    });
    const closeMessage = {{PAGE_PREFIX}}_msg_or_default({{JS_PREFIX}}_messages, 'web_close', 'close');
    closeControl.appendChild(document.createTextNode(closeMessage));
    detailsDiv.appendChild(closeControl);

}

function {{JS_PREFIX}}_toggle_app_details(ev) {
    if ({{JS_PREFIX}}_app_details) {
        {{JS_PREFIX}}_hide_app_details();
    } else {
        {{JS_PREFIX}}_show_app_details();
    }
}

{{{APPLY_BLOCKS_JS}}}

{{{ICON_JS}}}

{{PAGE_PREFIX}}_addBubbleApp({
    jsPrefix: '{{JS_PREFIX}}',
    app: '{{BUBBLE_APP_NAME}}',
    link: {{JS_PREFIX}}_toggle_app_details,
    icon: 'icon',
    onReady: function () {
        {{JS_PREFIX}}_load_messages('web_', function (messages) {
            {{JS_PREFIX}}_messages = messages;
        })
        {{JS_PREFIX}}_fetch_blocks();
    }
});
